--- !define
COMMAND_NAME: $(ITEM_NAME)
COMMAND_USAGE_PREFIX: "Usage: $(INSTL_EXEC_DISPLAY_NAME) $(COMMAND_NAME)"
INPUT_FILE_TAG: path-to-input-file
INPUT_FILE_OPTION_SUMMERY:  --in $(INPUT_FILE_TAG)
CONFIG_FILE_TAG: path-to-config-file
CONFIG_FILE_OPTION_SUMMERY:  --config-file $(CONFIG_FILE_TAG)
OUTPUT_BATCH_FILE_TAG: $(COMMAND_NAME).sh
OUTPUT_BATC_FILE_OPTION_SUMMERY:  --out $(OUTPUT_BATCH_FILE_TAG)
RUN_OPTION_SUMMERY: "[--run]"
RUN_OPTION_EXPLANATION_PREFIX: Keep in mind that $(COMMAND_NAME) command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file (probably named $(OUTPUT_BATCH_FILE_TAG)) in order to actually 
PROGRESS_OPTIONS_SUMMERY: "[--start-progress start-progress-number] [--total-progress total-progress-number]"
PROGRESS_OPTIONS_TEXT: |
            If --start-progress and --total-progress options are given, check-checksum will output progress messages starting with the number given in --start-progress with a total given in total-progress. Progress message for action N would be:
            Progress start-progress-number+N of total-progress;
UTILITY_COMMAND_MESSAGE: $(COMMAND_NAME) is a utility command, it is not needed for creating or using instl-based installer

--- !help

command:
    check-checksum:
        short: Check synced files against their expected sha1 checksum
        long: |
            $(COMMAND_USAGE_PREFIX) $(INPUT_FILE_OPTION_SUMMERY) $(PROGRESS_OPTIONS_SUMMERY)
            Calculate the sha1 checksum of each file listed in $(INPUT_FILE_TAG) and compare this checksum against the expected checksum listed in $(INPUT_FILE_TAG).
            $(INPUT_FILE_TAG) should be a path to a file in info_map.txt format containing a list of the files to check. All file paths listed in $(INPUT_FILE_TAG) are relative to the current directory.
            A list of non matching or missing files is printed at the end.
            Non zero exit code is returned if any file in $(INPUT_FILE_TAG) is missing or has non matching checksum.
            check-checksum command is used as part of the batch created by the sync or synccopy commands and $(INPUT_FILE_TAG) would be bookkeeping/to_sync_info_map.txt.
            $(PROGRESS_OPTIONS_TEXT)

    check-sig:
        short: Check file against it's RSA signature and expected sha1 checksum
        long: |
            $(COMMAND_USAGE_PREFIX) --in file-to-check $(CONFIG_FILE_OPTION_SUMMERY) [--sha1 expected_sha1_checksum] [--rsa rsa_signature]
            file-to-check is the file for which RSA signature and/or sha1 checksum will be checked.
            $(CONFIG_FILE_TAG) is a YAML configuration file with relevant variables.
            If --rsa option is given, check-sig will verify the signature agains the file using the public key (variable: PUBLIC_KEY) supplied in the config file.
            If --sha2 option is given check-sig will calculate the file's sha1 checksum and compare the result to the given checksum.
            $(UTILITY_COMMAND_MESSAGE).

    copy:
      short: Copy files to their destination.
      long: |
            $(COMMAND_USAGE_PREFIX) $(INPUT_FILE_OPTION_SUMMERY) $(OUTPUT_BATC_FILE_OPTION_SUMMERY) $(RUN_OPTION_SUMMERY)
            instl's copy command will create a batch file containing instructions to copy files to their designated locations on disk. Said files were previously downloaded using the sync command. Definition of what to copy to which destination is taken from the instl-config-yaml-file.
            $(RUN_OPTION_EXPLANATION_PREFIX) copy the files.


    create-folders:
        short: Create folders in preparation for sync.
        long: |
            $(COMMAND_USAGE_PREFIX) $(INPUT_FILE_OPTION_SUMMERY) $(PROGRESS_OPTIONS_SUMMERY)
            For each item marked as folder in $(INPUT_FILE_TAG) create-folders will create the folder relative to the current directory.
            $(INPUT_FILE_TAG) should be a path to a file in info_map.txt format containing a list of the folders to create.
            create-folders command is used in the batch created by the sync or synccopy commands and $(INPUT_FILE_TAG) would be bookkeeping/to_sync_info_map.txt.
            $(PROGRESS_OPTIONS_TEXT)

    create-links:
        short: Maintains a folder of revision specific folders ready to be uploaded by the up2s3 command. (admin command)
        long: |
            $(COMMAND_USAGE_PREFIX) $(CONFIG_FILE_OPTION_SUMMERY) $(OUTPUT_BATC_FILE_OPTION_SUMMERY)  $(RUN_OPTION_SUMMERY)
            For each revision of the svn repository, starting with the base revision, create-links will checkout the revision from svn to a Base folder, and copy the files to a folder named after the revision. Copying is done using hard links and hence the name of the command. In addition create-links will create info_map files describing the contents of the specific revision. A revision folder created successfully will contain a stamp file which will cause the folder to be skipped the next time create-links is called.
            All information about the svn repository url, the location of the top level links folder, the base revision etc, is taken from $(CONFIG_FILE_TAG).
            relevant variables: REPO_NAME, SVN_REPO_URL, ROOT_LINKS_FOLDER_REPO, BASE_REPO_REV

    create-repo-rev-file:
        short: creates a file containing basic information about a specific revision. (admin command)
        long: |
            $(COMMAND_USAGE_PREFIX)
            The created file can be uploaded to s3 once the specific revision is ready for distribution, using up-repo-rev command.
            The variables in the created file are specified in REPO_REV_FILE_VARS variable.
            This command is intended to be called by the create-links command.

    create-rsa-keys:
        short: Create private and public RSA keys. (admin command)
        long: |
            $(COMMAND_USAGE_PREFIX) $(CONFIG_FILE_OPTION_SUMMERY).
            Private key is written to a file named in variable PRIVATE_KEY_FILE which defaults to "$(REPO_NAME).private_key".
            Public key is written to a file named in variable PUBLIC_KEY_FILE which defaults to "$(REPO_NAME).public_key".
            Variables PRIVATE_KEY_FILE, PUBLIC_KEY_FILE, REPO_NAME are read from $(CONFIG_FILE_TAG).
            Key size is 4096. Keys are produced in PEM format.

    fix-props:
        short: Fix certain properties in svn repository. (admin command)
        long: |
            $(COMMAND_USAGE_PREFIX) $(CONFIG_FILE_OPTION_SUMMERY) $(OUTPUT_BATC_FILE_OPTION_SUMMERY) $(RUN_OPTION_SUMMERY)
            Removes or adds svn:executable property where appropriate and removes all other properties. Files are assumed to be executables if their path matchs the regexs specified in variable EXEC_PROP_REGEX. The path to SVN repository is taken from the SVN_CHECKOUT_FOLDER variable.
            $(RUN_OPTION_EXPLANATION_PREFIX) fix the properties. Also, running the batch file does not commit the properties changes, this should be manually done, after proper inspection, with an SVM client software.

    fix-symlinks:
        short: Replace symlinks with .symlink files. (admin command)
        long: |
            $(COMMAND_USAGE_PREFIX) $(CONFIG_FILE_OPTION_SUMMERY) $(OUTPUT_BATC_FILE_OPTION_SUMMERY)  $(RUN_OPTION_SUMMERY)
            Since s3 cannot deal with symlinks, symlinks should not be committed to svn. Instead the fix-symlinks command will replace each symlinks with file with the same name and the extension .symlink. The .symlink file will contain the relative path of the symlink.
            The folder where symlinks will be fixed is specifies in STAGING_FOLDER variable in $(CONFIG_FILE_TAG).
            $(RUN_OPTION_EXPLANATION_PREFIX) replace the symlinks.

    help:
        short: display help text about command, variable or command line option.
        long: |
            Usage:
                instl help <variable>
                instl help <command>
                instl help <option>
                instl help defaults

    make-sig:
        short: Create RSA signature and sha1 checksum for a file. (admin command)
        long: |
            $(COMMAND_USAGE_PREFIX) --in file_to_sig $(CONFIG_FILE_OPTION_SUMMERY)
            RSA signature is created using the private key (variable: PRIVATE_KEY) supplied in the config file.
            $(UTILITY_COMMAND_MESSAGE).

    parallel-run:
        short: Run processes in parallel.
        long: |
            $(COMMAND_USAGE_PREFIX) --in list-of-processes-to-run
            Read the list-of-processes-to-run file and launch a process running the command in each line. It will return when all processes have finished or when any process returns non zero value.
            parallel-run command is used in the batch file created by the sync or synccopy commands.

    set-exec:
        short: Set executable bit for seleced files.
        long: |
            $(COMMAND_USAGE_PREFIX) $(INPUT_FILE_OPTION_SUMMERY) $(PROGRESS_OPTIONS_SUMMERY)
            Sets the executable bit for files marked as such in $(INPUT_FILE_TAG) which is in info_map.txt format. Paths are relative to current directory.
            set-exec command is used in the batch file created by the copy or synccopy commands.
            $(PROGRESS_OPTIONS_TEXT)

    stage2svn:
        short: Update svn from a staging folder. (admin command)
        long: |
           $(COMMAND_USAGE_PREFIX) $(CONFIG_FILE_OPTION_SUMMERY) $(OUTPUT_BATC_FILE_OPTION_SUMMERY)  $(RUN_OPTION_SUMMERY)
           Making changes to the svn repository cannot be done on the svn checkout folder directly, mainly because svn finds it difficult to discoved and handle deleted files. 
           When the staging folder (created by the svn2stage command) is ready, $(COMMAND_NAME) can be called to create the svn commands to add/delete files. Existing files that were changed will be discovered by svn itself. Before calling $(COMMAND_NAME) it is advisable to call the commands fix-symlinks, as $(COMMAND_NAME) will refuse to work is symlinks are found in the staging folder.
           $(RUN_OPTION_EXPLANATION_PREFIX) run the svn commands and then manually commit the changes to svn.

    svn2stage:
        short: Create a fresh staging folder by checking out the latest svn revision and copying the files to the staging folder. (admin command)
        long: |
            $(COMMAND_USAGE_PREFIX) $(CONFIG_FILE_OPTION_SUMMERY) $(OUTPUT_BATC_FILE_OPTION_SUMMERY)  $(RUN_OPTION_SUMMERY)
            Making changes to the svn repository cannot be done on the svn checkout folder directly, mainly because svn finds it difficult to handle deleted files. svn2stage will checkout the latest revision to the svn folder (variable: SVN_CHECKOUT_FOLDER), and export the revision's files to the staging folder (variable: STAGING_FOLDER). Now changes to the staging folder can be made. When the staging folder is ready, stage2svn can be called to create the svn command to add/delete files
            $(RUN_OPTION_EXPLANATION_PREFIX) run the svn and copy commands.

    sync:
      short: Download files.
      long: |
            $(COMMAND_USAGE_PREFIX) $(INPUT_FILE_OPTION_SUMMERY) $(OUTPUT_BATC_FILE_OPTION_SUMMERY)  $(RUN_OPTION_SUMMERY)
            instl's sync command will create a batch file containing instructions to download required files. Said files can be later copied to their final destination using the copy command. Definition of what to sync from what url is taken from $(INPUT_FILE_TAG).
            $(RUN_OPTION_EXPLANATION_PREFIX) download the files.

    synccopy:
        short: Download files and copy them to their destination.
        long: |
            $(COMMAND_USAGE_PREFIX) $(INPUT_FILE_OPTION_SUMMERY) $(OUTPUT_BATC_FILE_OPTION_SUMMERY)  $(RUN_OPTION_SUMMERY)
            instl's synccopy combines the actions of the sync and copy commands. The created batch file will download the required files and copy them to the designated locations on disk. Definition of what to sync from what url and what to copy to which destination is taken from $(INPUT_FILE_TAG)
            $(RUN_OPTION_EXPLANATION_PREFIX) download and install the files.

    trans:
        short: Translates between the various format of svn info files. (admin command)
        long:  |
            $(COMMAND_USAGE_PREFIX) --in svn-info-file [--props svn-props-file] [--filter-out path-to-filter-out [, path-to-filter-out] ] [--filter-in version-to-filter-in]
            Translate between the format created by svn info command and the native instl info format. Additional input that can be given is the output of the svn proplist command. $(COMMAND_NAME) also has limited filtering options.
            trans command is used as part of the batch created by create-links command.

    unwtar:
        short: Combines split wtar files and uncompresses wtar files.
        long: |
            $(COMMAND_USAGE_PREFIX)
            Walks the current directory recursively and looks for .wtar files. Files who's extension is in the format '*.wtar.aa' are split files and are combined to a .wtar file. If combination is successful a '.wtar.aa.done' file is created, this will prevent subsequent runs of unwtar from combining the files again.
            Files who's extension is in the format '*.wtar' are untared to their directory. If untarring is successful a '.wtar.done' file is created, this will prevent subsequent runs of unwtar from untarring the files again.
            unwtar command is used as part of the batch created by the sync or synccopy commands.

    up-repo-rev:
        short: Upload a file containing basic information about uploaded repository. (admin command)
        long: |
            $(COMMAND_USAGE_PREFIX) $(CONFIG_FILE_OPTION_SUMMERY)
            up-repo-rev will create a repo_rev file according to the information in the config file, and upload said repo_rev file to s3 bucket to a top level folder called 'admin'. The contents of the repo_rev file are a list of variables defined in the "REPO_REV_FILE_VARS" variable of the config file. Typically these variables would be: REPO_REV, REPO_TYPE, SYNC_BASE_URL.
            relevant variables:
                S3_BUCKET_NAME
                REPO_REV_FILE_NAME, REPO_REV_FILE_VARS, REPO_TYPE, REPO_REV, REPO_NAME

    up2s3:
        short: Upload revision specific folders created with the create-links command. (admin command)
        long: |
            $(COMMAND_USAGE_PREFIX) $(CONFIG_FILE_OPTION_SUMMERY) $(OUTPUT_BATC_FILE_OPTION_SUMMERY)  $(RUN_OPTION_SUMMERY)
            For each revision folder created with the create-links command, $(COMMAND_NAME) will remove the files not belonging to the specific revision and upload the remaining files to s3. A revision folder uploaded successfully will contain a stamp file, that will cause the folder to be skipped the next time $(COMMAND_NAME) is called.
            All information about the the location of the top level links folder, the s3 url, etc, is taken from $(CONFIG_FILE_TAG).
            relevant variables: REPO_NAME, ROOT_LINKS_FOLDER_REPO, BASE_REPO_REV, S3_BUCKET_NAME
            $(RUN_OPTION_EXPLANATION_PREFIX) create upload the links.

    verify-index:
        short: Reads an index file and report discrepancies. (admin command)
        long: |
            $(COMMAND_USAGE_PREFIX) $(INPUT_FILE_OPTION_SUMMERY)
            $(INPUT_FILE_TAG) is a instl yaml file, $(COMMAND_NAME) will check it's index parts for missing sources, dependency and inheritance cycles.
    
    version:
        short: Prints the instl version.
        long: |
            $(COMMAND_USAGE_PREFIX)
    
    wtar:
        short: Compress files and folder to a .wtar file. (admin command)
        long: |
            $(COMMAND_USAGE_PREFIX)
            Files to compress are decided according to a regex given in the config file (variable: WTAR_REGEX).

variable:
    SYNC_BASE_URL:
        short: url used as the prefix for creating the full url to download installation files
        long: SYNC_BASE_URLSYNC_BASE_URLSYNC_BASE_URL

option:
    in:
        short: -i, --in input_file.
        long: input_file is yaml file with variable and index definitions that configure what a command does. Typically the input_file will also contain __include__ statements to get further variable and index definitions from a remore or local file.
    out:
        short: -o, --out output_file. *option_in
        long: |
            output_file is a batch file created by instl with instructions that implement the command it was created for, according to the input file given with the --in option.
            Specifying an output_file does not actually run the file, unless the --run option is given.
    run:
        short: -r, --run
        long: |
            for commands the accept --out  option Specifying --run will also run the out_put file.
