#!/usr/bin/env python2.7

""" main executable for instl """

from __future__ import print_function

import sys
import os
import argparse
import logging

# umask to 0 so that all files created under sudo, can be re-written under regular user.
os.umask(0)

# setup logging, must be done before other imports
from pyinstl.log_utils import setup_logging
setup_logging("instl", "instl")
from pyinstl.utils import get_current_os_names

from pyinstl.instlException import InstlFatalException, InstlException


current_os_names = get_current_os_names()
os_family_name = current_os_names[0]
os_second_name = current_os_names[0]
if len(current_os_names) > 1:
    os_second_name = current_os_names[1]

def get_path_to_instl_app():
    """
    @return: returns the path to this
    """
    application_path = None
    if getattr(sys, 'frozen', False):
        application_path = os.path.realpath(sys.executable)
    elif __file__:
        application_path = os.path.realpath(__file__)
    return application_path

def get_data_folder():
    data_folder = None
    if getattr(sys, 'frozen', False):
        data_folder = getattr(sys, '_MEIPASS', None)
    elif __file__:
        data_folder = os.path.dirname(os.path.realpath(__file__))
    return data_folder

class CommandLineOptions(object):
    """ namespace object to give to parse_args
        holds command line options
    """
    def __init__(self):
        self.command = None
        self.input_file = None
        self.output_file = None
        self.run = False
        self.state_file = None
        self.props_file = None
        self.filter_out = None
        self.filter_in = None
        self.target_repo_rev = None
        self.base_repo_rev = None
        self.config_file = None
        self.staging_folder = None
        self.svn_folder = None
        self.sh1_checksum = None
        self.rsa_signature = None
        self.start_progress = None
        self.total_progress = None
        self.just_with_number = None
        self.limit_command_to = None

    def __str__(self):
        return "\n".join([''.join((n, ": ", str(v))) for n, v in sorted(vars(self).iteritems())])

def prepare_args_parser():
    """
    Prepare the parsers for command line arguments
    """
    def decent_convert_arg_line_to_args(self, arg_line):
        """ parse a file with options so that we do not have to write one sub-option
            per line.  Remove empty lines, comment lines, and end of line comments.
            ToDo: handle quotes
        """
        line_no_whitespace = arg_line.strip()
        if line_no_whitespace and line_no_whitespace[0] != '#':
            for arg in line_no_whitespace.split():
                if not arg:
                    continue
                elif  arg[0] == '#':
                    break
                yield arg

    parser = argparse.ArgumentParser(description='instl: cross platform svn based installer',
                    prefix_chars='-+',
                    fromfile_prefix_chars='@',
                    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    argparse.ArgumentParser.convert_arg_line_to_args = decent_convert_arg_line_to_args

    subparsers = parser.add_subparsers(dest='command', help='sub-command help')
    check_checksum_parser = subparsers.add_parser('check-checksum', help='check checksum for a list of files from info_map file')
    check_sig_parser = subparsers.add_parser('check-sig', help='check sha1 checksum and/or rsa signature for a file')
    copy_parser = subparsers.add_parser('copy', help='copy files from temp folder to target paths')
    create_folders_parser = subparsers.add_parser('create-folders', help='create folders from info_map file')
    create_links_parser = subparsers.add_parser('create-links', help='create links from the base SVN checkout folder for a specific version')
    create_repo_rev_file_parser = subparsers.add_parser('create-repo-rev-file', help='create repo rev file for a specific revision')
    create_rsa_keys_parser = subparsers.add_parser('create-rsa-keys', help='create private and public keys')
    fix_props_parser = subparsers.add_parser('fix-props', help='create svn commands to remove redundant properties such as executable bit from files that should not be marked executable')
    fix_symlinks_parser = subparsers.add_parser('fix-symlinks', help='replace symlinks with .symlinks files')
    help_parser = subparsers.add_parser('help')
    make_sig_parser = subparsers.add_parser('make-sig', help='create sha1 checksum and rsa signature for a file')
    parallel_run_parser = subparsers.add_parser('parallel-run', help="Run processes in parallel")
    set_exec_parser = subparsers.add_parser('set-exec', help='set executable bit for appropriate files')
    stage2svn_parser = subparsers.add_parser('stage2svn', help='add/remove files in staging to svn sync repository')
    svn2stage_parser = subparsers.add_parser('svn2stage', help='svn sync repository and copy to staging folder')
    sync_parser = subparsers.add_parser('sync', help='sync files to be installed from server to temp folder')
    synccopy_parser = subparsers.add_parser('synccopy', help='sync files to be installed from server to temp folder and copy files from temp folder to target paths')
    test_import_parser = subparsers.add_parser('test-import', help='test the import of required modules')
    trans_parser = subparsers.add_parser('trans', help='translate svn map files from one format to another')
    unwtar_parser = subparsers.add_parser('unwtar', help='uncompress .wtar files in current folder')
    up_repo_rev_parser = subparsers.add_parser('up-repo-rev', help='upload repository revision file to admin folder')
    up2S3_parser = subparsers.add_parser('up2s3', help='upload installation sources to S3')
    verify_index_parser = subparsers.add_parser('verify-index', help='Verify that index and info map are compatible')
    version_parser = subparsers.add_parser('version', help='display instl version')
    wtar_parser = subparsers.add_parser('wtar', help='create .wtar files from specified files and folders')

    command_names = sorted(subparsers.choices.keys())

    modes = {'client': (sync_parser, copy_parser, synccopy_parser),
             'admin': (trans_parser, create_links_parser, up2S3_parser,
                        up_repo_rev_parser, fix_props_parser, fix_symlinks_parser,
                        stage2svn_parser, svn2stage_parser, wtar_parser,
                        create_rsa_keys_parser, make_sig_parser, check_sig_parser,
                        create_repo_rev_file_parser, verify_index_parser),
             'do_something': (version_parser, help_parser, parallel_run_parser,
                              unwtar_parser, check_checksum_parser, create_folders_parser,
                              set_exec_parser, test_import_parser)
            }
    for the_mode, parsers in modes.iteritems():
        for some_parser in parsers:
            some_parser.set_defaults(mode=the_mode)

    need_input_options = (sync_parser, copy_parser, synccopy_parser,
                          trans_parser, make_sig_parser, check_sig_parser,
                            verify_index_parser, parallel_run_parser, check_checksum_parser,
                            create_folders_parser, set_exec_parser)
    need_output_options = (copy_parser, sync_parser, synccopy_parser,
                           trans_parser, create_links_parser, fix_symlinks_parser,
                           up2S3_parser, fix_props_parser, stage2svn_parser,
                           svn2stage_parser, wtar_parser, up_repo_rev_parser)
    need_run_option = (copy_parser, sync_parser, synccopy_parser,
                           create_links_parser, fix_symlinks_parser,
                           up2S3_parser, fix_props_parser, stage2svn_parser,
                           up_repo_rev_parser)
    need_config_file_options = (create_links_parser, up_repo_rev_parser, up2S3_parser,
                                fix_props_parser, stage2svn_parser, svn2stage_parser,
                                wtar_parser, create_rsa_keys_parser, make_sig_parser,
                                check_sig_parser, create_repo_rev_file_parser,
                                fix_symlinks_parser)
    need_progress_options = (check_checksum_parser, unwtar_parser, create_folders_parser,
                            set_exec_parser)
    need_limit_options = (stage2svn_parser, svn2stage_parser)

    # add --in to parsers that need it
    for subparser in need_input_options:
        input_options = subparser.add_argument_group(description='input arguments:')
        input_options.add_argument('--in', '-i',
                                    required=True,
                                    nargs=1,
                                    metavar='path-to-input-file',
                                    dest='input_file',
                                    help="file to read index and definitions from")

    # add --out && --run to parsers that need it
    for subparser in need_output_options:
        output_options = subparser.add_argument_group(description='output arguments:')
        output_options.add_argument('--out', '-o',
                                    required=True,
                                    nargs=1,
                                    metavar='path-to-output-file',
                                    dest='output_file',
                                    help="out put file")
    for subparser in need_run_option:
        run_option = subparser.add_argument_group(description='run arguments:')
        run_option.add_argument('--run', '-r',
                                    required=False,
                                    default=False,
                                    action='store_true',
                                    dest='run',
                                    help="run the installation instructions script")

    # add --config-file to parsers that need it
    for subparser in need_config_file_options:
        config_file_options = subparser.add_argument_group(description='admin arguments:')
        config_file_options.add_argument('--config-file', '-s',
                                    required=True,
                                    nargs=1,
                                    metavar='path-to-config-file',
                                    dest='config_file',
                                    help="path to config-file")

    # add --start-progress --total-progress to parsers that need it
    for subparser in need_progress_options:
        progress_options = subparser.add_argument_group(description='dynamic progress report')
        progress_options.add_argument('--start-progress',
                                    required=False,
                                    nargs=1,
                                    metavar='start-progress-number',
                                    dest='start_progress',
                                    help="num progress items to begin with")
        progress_options.add_argument('--total-progress',
                                    required=False,
                                    nargs=1,
                                    metavar='total-progress-number',
                                    dest='total_progress',
                                    help="num total progress items")

    for subparser in need_limit_options:
        limit_options = subparser.add_argument_group(description='limit command to specific folder')
        limit_options.add_argument('--limit',
                                    required=False,
                                    nargs='+',
                                    metavar='limit-command-to',
                                    dest='limit_command_to',
                                    help="list of command to limit the action to")

    trans_options = trans_parser.add_argument_group(description='translate arguments:')
    trans_options.add_argument('--props', '-p',
                                required=False,
                                nargs=1,
                                metavar='path-to-props-file',
                                dest='props_file',
                                help="file to read svn properties from")
    trans_options.add_argument('--filter-out',
                                required=False,
                                nargs='+',
                                metavar='paths-to-filter-out',
                                dest='filter_out',
                                help="paths to filter out, comma separated")
    trans_options.add_argument('--filter-in',
                                required=False,
                                nargs=1,
                                metavar='version-to-filter-in',
                                dest='filter_in',
                                help="version to filter in, all other version will be left out")
    trans_options.add_argument('--base-repo-rev',
                                required=False,
                                nargs=1,
                                metavar='base-repo-rev',
                                dest='base_repo_rev',
                                help="minimal version, all version below will be changed to base-repo-rev")

    check_sig_options = check_sig_parser.add_argument_group(description='check sig arguments:')
    check_sig_options.add_argument('--sha1',
                                required=False,
                                nargs=1,
                                metavar='sh1-checksum',
                                dest='sh1_checksum',
                                help="expected sha1 checksum")
    check_sig_options.add_argument('--rsa',
                                required=False,
                                nargs=1,
                                metavar='rsa-sig',
                                dest='rsa_signature',
                                help="expected rsa SHA-512 signature")

    create_repo_rev_file_options = create_repo_rev_file_parser.add_argument_group(description='create repo rev file arguments:')
    create_repo_rev_file_options.add_argument('--rev',
                                required=False,
                                nargs=1,
                                metavar='revision-to-create-file-for',
                                dest='target_repo_rev',
                                help="revision to create file for")


    up_repo_rev_options = up_repo_rev_parser.add_argument_group(description='up_repo_rev arguments:')
    up_repo_rev_options.add_argument('--just-with-number', '-j',
                            required=False,
                            nargs=1,
                            metavar='just-with-number',
                            dest='just_with_number',
                            help="up load just the repo-rev file that ends with a specific number, not the general one")

    help_options = help_parser.add_argument_group(description='help subject:')
    help_options.add_argument('subject', nargs='?')

    return parser, command_names

def read_command_line_options(name_space_obj, arglist=None):
    """ parse command line options """
    #args_str = "No options given"
    # todo: restore __COMMAND_LINE_OPTIONS__
    #if arglist is not None:
    #    logging.info("arglist: %s", " ".join(arglist))
    #var_list.add_const_config_variable('__COMMAND_LINE_OPTIONS__', "read only value", args_str)
    if not arglist or len(arglist) == 0:
        pass
        # No command line options given, but there maybe a "auto run" file with options
        #auto_run_file_path = None
        # todo: restore autorun file reading
        #auto_run_file_name = "auto_run_instl.yaml"
        #auto_run_file_path = self.path_searcher.find_file(auto_run_file_name)
        #if auto_run_file_path:
        #    arglist = ("@"+auto_run_file_path,)
        #    logging.info("found auto run file %s", auto_run_file_name)
    parser, command_names = prepare_args_parser()
    if arglist and len(arglist) > 0:
        # Command line options were given or auto run file was found
        parser.parse_args(arglist, namespace=name_space_obj)
    else:
        # No command line options were given
        name_space_obj.mode = "interactive"
    return command_names

def main():
    """ Main instl entry point. Reads command line options and decides if to go into interactive or client mode.
    """
    options = CommandLineOptions()
    command_names = read_command_line_options(options, sys.argv[1:])
    initial_vars = {"__INSTL_EXE_PATH__": get_path_to_instl_app(),
                    "__INSTL_DATA_FOLDER__": get_data_folder(),
                    "__INSTL_COMPILED__": str(getattr(sys, 'frozen', False)),
                    "__PYTHON_VERSION__": sys.version_info,
                    "__COMMAND_NAMES__": command_names,
                    "__CURRENT_OS__": os_family_name,
                    "__CURRENT_OS_SECOND_NAME__": os_second_name,
                    "__CURRENT_OS_NAMES__": current_os_names,
                    "__ACCEPTABLE_YAML_DOC_TAGS__": ("help", "index", "define", "define_const")}
    if os_family_name != "Win":
        initial_vars.update(
                    {"__USRER_ID__": str(os.getuid()),
                     "__GROUP_ID__": str(os.getgid())})

    logging.info("Command %s", options.command)
    if options.mode == "client":
        from pyinstl.instlClient import InstlClient
        instance = InstlClient(initial_vars)
        instance.init_from_cmd_line_options(options)
        instance.do_command()
    elif options.mode == "admin":
        from pyinstl.instlAdmin import InstlAdmin
        instance = InstlAdmin(initial_vars)
        instance.init_from_cmd_line_options(options)
        instance.do_command()
    elif options.mode == "interactive":
        from pyinstl.instlClient import InstlClient
        client = InstlClient(initial_vars)
        client.init_from_cmd_line_options(options)
        from pyinstl.instlAdmin import InstlAdmin
        from pyinstl.instlInstanceBase_interactive import go_interactive
        admin = InstlAdmin(initial_vars)
        admin.init_from_cmd_line_options(options)
        go_interactive(client, admin)
    elif options.mode == "do_something":
        from pyinstl.instlMisc import InstlMisc
        instance = InstlMisc(initial_vars)
        instance.init_from_cmd_line_options(options)
        instance.do_command()
    else:
        raise InstlException("incomprehensible command line options:\n", options)
    logging.info("Done %s", options.command)

if __name__ == "__main__":
    main()
